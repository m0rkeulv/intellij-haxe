/*
 * Copyright 2000-2013 JetBrains s.r.o.
 * Copyright 2014-2018 AS3Boyan
 * Copyright 2014-2014 Elias Ku
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Source generation tested and working with Haxe Compiler 3.4.7
 */

runIde.enabled = false
patchPluginXml.enabled = false
verifyPlugin.enabled = false

findHaxeVersion()

ext.hxcppSrcFolder = "src/main/haxe"
sourceSets.main.java.srcDir "$hxcppGeneratedFolder/src"

task generateDebuggerJavaSource(type: Exec, group: "hxcpp") {

    inputs.file "${hxcppSrcFolder}/JavaProtocol.hx"
    outputs.dir "${hxcppGeneratedFolder}/src"

    workingDir 'src/main/haxe/'
    commandLine 'haxe', '-cp', '..', '-java', '../../generated/java/', '-main', 'JavaProtocol',
            '-lib', "hxcpp-debugger:$hxcppDebuggerVersion",
            '-lib', "hxjava:$hxjavaVersion"
}

clean.dependsOn('cleanGenerated')
task cleanGenerated(type: Delete, group: 'generate') {
    delete "$hxcppGeneratedFolder"
}

cleanGenerated.onlyIf { ext.generateHxcppDebugger }
generateDebuggerJavaSource.onlyIf { ext.generateHxcppDebugger }

compileJava.dependsOn('generateDebuggerJavaSource')



def findHaxeVersion() {
    if (!project.hasProperty('generateHxcpp') || project.property('generateHxcpp') != "true") {
        ext.hxcppGeneratedFolder = "src/fallback/java"
        ext.generateHxcppDebugger = false
    } else {
        def so = new ByteArrayOutputStream()
        def eo = new ByteArrayOutputStream()
        try {
            exec {
                commandLine 'haxe', '-version'
                standardOutput = so
                errorOutput = eo
            }
            //haxe(3.4.7) returns version in error output for some reason
            ext.haxeVersion = eo.toString()
        }
        catch (Exception e) {
            ext.haxeVersion = null
        } finally {
            so.close()
            eo.close()
        }

        if (ext.haxeVersion != null) {
            println("Haxe found: $ext.haxeVersion")
            println("Gradle will try to generate hxcpp debugger protocol if nessesary")
            ext.hxcppGeneratedFolder = "src/generated/java"
            ext.generateHxcppDebugger = true
        } else {
            println("Haxe not found ")
            println("Gradle will use provided hxcpp debugger protocol source")
            ext.hxcppGeneratedFolder = "src/fallback/java"
            ext.generateHxcppDebugger = false
        }
    }
}