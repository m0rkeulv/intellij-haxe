/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.project.Project;
import com.intellij.plugins.haxe.util.HaxeDebugLogger;
import com.intellij.psi.tree.IElementType;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUO_STRING = 2;
  public static final int APOS_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int COMPILER_CONDITIONAL = 10;
  public static final int CC_STRING = 12;
  public static final int CC_APOS_STRING = 14;
  public static final int CC_BLOCK = 16;
  public static final int METADATA = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\5\1\101\1\102\1\5\22\0\1\62\1\72\1\30\1\33\1\6\1\100\1\75\1\31"+
    "\1\12\1\13\1\15\1\27\1\66\1\67\1\7\1\14\1\21\7\20\2\17\1\11\1\65\1\76\1\71"+
    "\1\70\1\73\1\10\4\16\1\26\1\16\21\2\1\23\2\2\1\63\1\4\1\64\1\77\1\2\1\0\1"+
    "\45\1\44\1\54\1\47\1\37\1\50\1\55\1\57\1\35\1\2\1\46\1\34\1\25\1\36\1\41\1"+
    "\53\1\2\1\40\1\56\1\52\1\51\1\60\1\43\1\22\1\61\1\2\1\32\1\74\1\42\1\24\6"+
    "\0\1\101\24\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\12\2\4\0\14\2\16\0\5\2\7\0"+
    "\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0\1\2\1\0\4"+
    "\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10\0\13\2\5\0\3\2"+
    "\15\0\12\3\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\3\3\2\2\0\2\2\1\0\16\2\15\0"+
    "\11\2\13\0\1\2\16\0\12\3\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1\2\11\0\1\2\3\0"+
    "\1\2\7\0\11\2\7\0\5\2\1\0\10\2\6\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4\0\12\3"+
    "\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0\1\2\15"+
    "\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0\1\2\7"+
    "\0\12\3\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30\0\1\2"+
    "\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2"+
    "\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\1\2\4\0\10\2\1\0"+
    "\6\2\1\0\5\2\3\0\1\2\3\0\2\2\15\0\13\2\2\0\1\2\6\0\3\2\10\0\1\2\12\0\6\2\5"+
    "\0\22\2\3\0\10\2\1\0\11\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\3\7\0\2"+
    "\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\2\1\0\4\2\1\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\3\2\0\14\2\1\0\24"+
    "\2\13\0\5\2\22\0\7\2\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0"+
    "\6\2\1\0\1\2\5\0\1\2\2\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0"+
    "\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0"+
    "\10\2\7\0\15\2\1\0\6\2\23\0\1\2\4\0\1\2\3\0\5\2\2\0\22\2\1\0\1\2\5\0\17\2"+
    "\1\0\16\2\2\0\5\2\13\0\14\2\13\0\1\2\15\0\7\2\7\0\16\2\15\0\2\2\12\3\3\0\3"+
    "\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0"+
    "\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0\6\2\14\0\2\101\7\0\1\2\15\0\1\2\2"+
    "\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1"+
    "\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4\0\2\2\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2"+
    "\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5\2\5\0\2\2\3\0\7\2\6\0\3\2\12\3\2\2\13\0\11"+
    "\2\2\0\27\2\2\0\7\2\1\0\3\2\1\0\4\2\1\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5"+
    "\2\1\0\12\2\12\3\5\2\1\0\3\2\1\0\10\2\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0"+
    "\2\2\2\0\5\2\2\0\1\2\1\0\1\2\30\0\3\2\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0"+
    "\5\2\3\0\5\2\5\0\1\2\1\0\10\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0"+
    "\12\2\2\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1"+
    "\0\10\2\6\0\4\2\4\0\16\2\2\0\1\2\1\0\14\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2"+
    "\12\0\10\2\6\0\6\2\1\0\3\2\1\0\12\2\3\0\1\2\12\0\4\2\13\0\12\3\1\2\1\0\1\2"+
    "\3\0\7\2\1\0\1\2\1\0\4\2\1\0\17\2\1\0\2\2\14\0\3\2\7\0\4\2\11\0\2\2\1\0\1"+
    "\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3\2\2\0\1\2\2\0\2\2\2\0\4\2\1\0\14\2\1"+
    "\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10\2\1\0\7\2\1\0\14\2\1\0\4\2\1\0\5\2"+
    "\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0\22\3\1\0\2\2\1\0\1\2\2\0\1\2\1\0\12"+
    "\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2"+
    "\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1"+
    "\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12\2\1\0\5\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\2\12\1\1\1\3\1\13"+
    "\1\14\1\15\1\16\1\1\5\3\1\17\13\3\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\36"+
    "\1\40\1\36\1\37\2\41\3\37\1\42\1\37\1\43"+
    "\1\44\1\45\1\46\2\44\1\47\1\50\2\51\1\52"+
    "\1\53\2\46\1\54\1\44\1\55\2\44\1\56\1\57"+
    "\1\0\1\60\1\57\1\61\1\62\1\0\1\63\2\0"+
    "\1\64\1\65\1\0\1\66\1\67\1\70\1\71\1\63"+
    "\1\72\1\0\1\73\1\0\1\3\1\74\1\75\3\0"+
    "\1\3\1\76\1\77\13\3\1\100\24\3\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\36\1\117\1\120\1\41"+
    "\2\0\1\121\1\0\1\122\1\0\2\46\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\57\1\63\1\0\1\131"+
    "\1\132\1\67\1\133\1\134\1\135\1\0\1\136\1\3"+
    "\1\0\1\137\3\0\3\3\1\140\15\3\1\141\5\3"+
    "\1\142\15\3\1\143\1\144\1\41\1\121\1\0\1\145"+
    "\2\46\1\0\2\133\1\136\1\3\2\0\1\146\1\0"+
    "\5\3\1\147\1\3\1\150\1\151\14\3\1\152\1\153"+
    "\10\3\1\154\1\155\3\3\1\156\1\46\1\157\1\67"+
    "\1\0\1\3\1\160\1\0\4\3\1\161\4\3\1\162"+
    "\1\163\3\3\1\164\1\165\2\3\1\166\1\167\4\3"+
    "\1\170\1\3\1\171\1\3\1\172\1\3\1\173\1\174"+
    "\1\0\1\3\1\175\1\176\3\3\1\177\11\3\1\200"+
    "\1\3\1\201\1\202\1\203\2\3\1\204\1\205\2\3"+
    "\1\206\1\207\1\3\1\210\1\211\1\212\1\213\3\3"+
    "\1\214\1\215\1\216\1\217\1\3\1\220\1\221";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u029e\0\u029e\0\u029e\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c"+
    "\0\u057f\0\u05c2\0\u029e\0\u029e\0\u029e\0\u0605\0\u0648\0\u068b"+
    "\0\u06ce\0\u0711\0\u0754\0\u029e\0\u0797\0\u07da\0\u081d\0\u0860"+
    "\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u029e"+
    "\0\u029e\0\u029e\0\u029e\0\u0a78\0\u029e\0\u0abb\0\u0afe\0\u029e"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u029e\0\u0d59\0\u029e\0\u0d9c\0\u0ddf\0\u0367\0\u03ed\0\u053c"+
    "\0\u029e\0\u0605\0\u029e\0\u029e\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u029e\0\u029e\0\u0f2e\0\u0f71\0\u029e\0\u029e\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u029e\0\u1252\0\u029e\0\u029e\0\u0367\0\u1295\0\u12d8\0\u131b"+
    "\0\u029e\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u029e\0\u029e\0\u146a"+
    "\0\u14ad\0\u14f0\0\u029e\0\u1533\0\u1576\0\u029e\0\u029e\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u0324\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u0324\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u029e\0\u029e\0\u029e"+
    "\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e"+
    "\0\u1f25\0\u029e\0\u029e\0\u029e\0\u1f68\0\u029e\0\u1fab\0\u1fee"+
    "\0\u0ea8\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u029e"+
    "\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u029e\0\u21c3\0\u21c3"+
    "\0\u029e\0\u029e\0\u2206\0\u2249\0\u029e\0\u14f0\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u029e\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u0324\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u0324"+
    "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u0324\0\u29e0\0\u2a23"+
    "\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u0324\0\u029e\0\u2d47\0\u2d8a\0\u2d8a"+
    "\0\u20fa\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u029e\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u029e\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u3134\0\u0324\0\u3177\0\u0324\0\u0324\0\u31ba\0\u31fd\0\u3240"+
    "\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458"+
    "\0\u349b\0\u0324\0\u0324\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea"+
    "\0\u362d\0\u3670\0\u36b3\0\u0324\0\u0324\0\u36f6\0\u3739\0\u377c"+
    "\0\u0d9c\0\u37bf\0\u0e65\0\u029e\0\u3802\0\u3845\0\u3888\0\u38cb"+
    "\0\u390e\0\u3951\0\u3994\0\u39d7\0\u0324\0\u3a1a\0\u3a5d\0\u3aa0"+
    "\0\u3ae3\0\u0324\0\u0324\0\u3b26\0\u3b69\0\u3bac\0\u0324\0\u0324"+
    "\0\u3bef\0\u3c32\0\u0324\0\u0324\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e"+
    "\0\u0324\0\u3d81\0\u0324\0\u3dc4\0\u0324\0\u3e07\0\u0e65\0\u3e4a"+
    "\0\u3e8d\0\u3ed0\0\u0324\0\u0324\0\u3f13\0\u3f56\0\u3f99\0\u0324"+
    "\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1"+
    "\0\u41f4\0\u0324\0\u4237\0\u0324\0\u0324\0\u029e\0\u427a\0\u42bd"+
    "\0\u0324\0\u4300\0\u4343\0\u4386\0\u0324\0\u0324\0\u43c9\0\u0324"+
    "\0\u0324\0\u0324\0\u0324\0\u440c\0\u444f\0\u4492\0\u0324\0\u0324"+
    "\0\u0324\0\u0324\0\u44d5\0\u0324\0\u0324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\13\1\14\1\15\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\15\2\26"+
    "\1\27\2\15\1\30\1\31\1\15\1\32\1\33\1\34"+
    "\1\35\1\36\1\15\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\15\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\15\1\56\1\15\1\57\1\15"+
    "\1\14\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\0"+
    "\1\14\4\76\1\77\1\76\1\100\21\76\1\101\52\76"+
    "\4\102\1\77\1\102\1\100\22\102\1\101\51\102\2\103"+
    "\1\104\2\103\1\0\10\103\1\104\3\103\2\104\1\103"+
    "\2\104\5\103\6\104\1\103\7\104\1\105\7\104\17\103"+
    "\2\0\1\103\1\14\1\15\1\106\1\103\1\14\1\15"+
    "\1\17\1\107\1\21\1\22\1\23\1\24\1\25\1\15"+
    "\2\26\1\27\2\15\1\110\1\31\1\15\1\32\1\33"+
    "\1\34\1\111\1\112\1\15\1\37\1\40\1\41\1\42"+
    "\1\43\1\113\1\45\1\46\1\47\1\15\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\15\1\56\1\15\1\57"+
    "\1\15\1\14\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\0\1\14\1\114\1\115\1\116\1\117\1\114\1\115"+
    "\1\114\1\120\2\114\1\121\1\122\2\114\1\116\2\123"+
    "\1\124\2\116\1\114\2\116\1\114\1\125\1\126\2\114"+
    "\6\116\1\114\5\116\1\127\1\116\1\130\7\116\1\115"+
    "\5\114\1\131\1\132\1\133\1\114\1\134\1\135\1\136"+
    "\2\114\1\0\1\115\4\137\1\140\1\137\1\0\21\137"+
    "\1\141\52\137\4\142\1\140\1\142\1\0\22\142\1\141"+
    "\51\142\1\103\1\14\1\15\1\106\1\103\1\14\1\15"+
    "\1\17\1\107\1\21\1\22\1\23\1\24\1\25\1\15"+
    "\2\26\1\27\2\15\1\110\1\31\1\15\1\32\1\33"+
    "\1\34\1\35\1\112\1\15\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\15\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\15\1\56\1\15\1\57"+
    "\1\15\1\14\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\0\1\14\1\103\1\14\1\15\1\106\1\103\1\14"+
    "\1\15\1\17\1\107\1\21\1\143\1\144\1\24\1\25"+
    "\1\15\2\26\1\27\2\15\1\110\1\31\1\15\1\32"+
    "\1\33\1\34\1\35\1\112\1\15\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\15\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\15\1\56\1\15"+
    "\1\57\1\15\1\14\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\0\1\14\104\0\1\14\3\0\1\14\54\0"+
    "\1\14\17\0\1\14\2\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\17\15\24\0"+
    "\1\145\3\0\1\146\7\0\3\145\4\0\1\147\10\0"+
    "\1\147\46\0\1\146\3\0\1\150\5\0\1\151\1\0"+
    "\3\146\63\0\1\152\6\0\1\153\4\0\1\152\3\0"+
    "\2\152\1\0\2\152\5\0\6\152\1\0\17\152\35\0"+
    "\1\154\1\155\53\0\1\156\102\0\1\157\14\0\1\145"+
    "\3\0\1\160\7\0\3\26\4\0\1\147\10\0\1\147"+
    "\46\0\1\145\3\0\1\160\7\0\1\145\2\161\2\162"+
    "\2\0\1\147\10\0\1\147\43\0\14\163\1\164\66\163"+
    "\2\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\2\15\1\165\14\15\50\0\1\166"+
    "\41\0\1\167\45\0\1\170\1\171\1\0\1\172\45\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\1\173\1\15"+
    "\5\0\2\15\1\174\3\15\1\0\5\15\1\175\11\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\3\15\1\176\2\15\1\0\6\15\1\177\10\15"+
    "\23\0\2\15\2\0\1\15\7\0\4\15\1\200\1\15"+
    "\1\0\2\15\5\0\1\201\1\15\1\202\3\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\3\15\1\203\2\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\15\15\1\204\1\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\14\15\1\205\2\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\4\15\1\206\1\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\1\15\1\207\15\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\3\15\1\210\1\15\1\211\1\0\16\15\1\212\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\1\15\1\213\3\15\1\214\1\0\2\15\1\215\3\15"+
    "\1\216\10\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\2\15\1\217\3\15\1\0\13\15"+
    "\1\220\3\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\4\15\1\221\1\15\1\0\14\15"+
    "\1\222\1\15\1\223\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\4\15\1\224\1\15\1\0"+
    "\2\15\1\225\3\15\1\226\10\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\1\227\4\15"+
    "\1\230\1\0\2\15\1\231\14\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\1\232\5\15\1\233\1\234\7\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\2\15\1\235\14\15\110\0\1\236\1\237\1\240\101\0"+
    "\1\241\1\242\102\0\1\243\102\0\1\244\2\0\1\245"+
    "\77\0\1\246\3\0\1\247\76\0\1\250\4\0\1\251"+
    "\75\0\1\252\102\0\1\253\11\0\4\76\1\0\1\76"+
    "\1\0\21\76\1\0\52\76\5\254\1\0\75\254\2\0"+
    "\1\255\13\0\1\255\3\0\2\255\1\0\2\255\3\0"+
    "\1\256\1\0\6\255\1\0\17\255\21\0\4\102\1\0"+
    "\1\102\1\0\22\102\1\0\51\102\2\0\2\104\12\0"+
    "\6\104\1\0\2\104\5\0\6\104\1\0\17\104\23\0"+
    "\2\104\12\0\6\104\1\0\2\104\5\0\6\104\1\0"+
    "\14\104\1\257\2\104\22\0\1\115\3\0\1\115\54\0"+
    "\1\115\17\0\1\115\2\0\2\116\3\0\1\260\6\0"+
    "\6\116\1\0\2\116\5\0\6\116\1\0\17\116\24\0"+
    "\1\261\3\0\1\262\7\0\3\261\4\0\1\263\10\0"+
    "\1\263\46\0\1\262\13\0\3\262\64\0\1\261\3\0"+
    "\1\262\7\0\3\123\4\0\1\263\10\0\1\263\46\0"+
    "\1\261\3\0\1\262\7\0\1\261\2\264\2\265\2\0"+
    "\1\263\10\0\1\263\45\0\2\116\3\0\1\260\6\0"+
    "\6\116\1\0\2\116\5\0\6\116\1\0\2\116\1\266"+
    "\14\116\23\0\2\116\3\0\1\260\6\0\6\116\1\0"+
    "\2\116\5\0\4\116\1\267\1\116\1\0\17\116\112\0"+
    "\1\270\102\0\1\271\102\0\1\272\105\0\1\273\103\0"+
    "\1\274\76\0\1\275\11\0\4\137\1\0\1\137\1\0"+
    "\21\137\1\0\52\137\5\276\1\0\75\276\4\142\1\0"+
    "\1\142\1\0\22\142\1\0\51\142\3\0\1\146\13\0"+
    "\3\146\4\0\1\147\10\0\1\147\46\0\1\277\13\0"+
    "\3\277\5\0\1\300\37\0\1\300\22\0\1\301\75\0"+
    "\2\152\3\0\1\153\2\0\1\302\3\0\6\152\1\0"+
    "\2\152\5\0\6\152\1\0\17\152\23\0\1\152\13\0"+
    "\1\152\3\0\2\152\1\0\2\152\5\0\6\152\1\0"+
    "\17\152\21\0\5\154\1\0\75\154\15\303\1\304\65\303"+
    "\3\0\1\146\3\0\1\305\7\0\3\146\4\0\1\147"+
    "\10\0\1\147\46\0\1\145\3\0\1\146\7\0\1\145"+
    "\2\161\4\0\1\147\10\0\1\147\61\0\4\306\4\0"+
    "\1\306\10\0\1\306\4\0\2\306\1\0\2\306\3\0"+
    "\1\306\26\0\4\164\1\307\7\164\1\310\66\164\2\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\11\15\1\311\5\15\56\0\1\312\115\0"+
    "\1\313\66\0\1\314\1\0\1\315\1\0\1\316\44\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\10\15\1\317\6\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\1\320\5\15"+
    "\1\0\7\15\1\321\7\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\1\322"+
    "\14\15\1\323\1\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\1\324\5\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\7\15\1\325\7\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\13\15\1\326\3\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\6\15"+
    "\1\327\10\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\7\15\1\330\7\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\3\15\1\331\2\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\1\15"+
    "\1\332\4\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\3\15\1\333\2\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\13\15\1\334\3\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\5\15\1\335\11\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\2\15"+
    "\1\336\3\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\2\15\1\337\3\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\4\15\1\340\1\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\1\341\5\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\2\15\1\342"+
    "\3\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\7\15\1\343"+
    "\7\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\1\15\1\344\4\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\6\15\1\345\7\15\1\346\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\1\15"+
    "\1\347\2\15\1\350\1\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\10\15\1\351\6\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\1\15\1\352\4\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\11\15\1\353\5\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\1\15\1\354\15\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\2\15\1\355\14\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\2\15\1\356\3\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\7\15\1\357\3\15"+
    "\1\360\3\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\1\15\1\361\4\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\10\15\1\362\6\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\2\15\1\363\14\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\4\15\1\364\1\15"+
    "\1\0\17\15\112\0\1\365\13\0\2\255\12\0\6\255"+
    "\1\0\2\255\5\0\6\255\1\0\17\255\23\0\2\104"+
    "\12\0\6\104\1\0\2\104\5\0\1\104\1\366\4\104"+
    "\1\0\17\104\23\0\1\116\13\0\1\116\3\0\2\116"+
    "\1\0\2\116\5\0\6\116\1\0\17\116\24\0\1\262"+
    "\13\0\3\262\4\0\1\263\10\0\1\263\46\0\1\367"+
    "\13\0\3\367\5\0\1\370\37\0\1\370\16\0\1\261"+
    "\3\0\1\262\7\0\1\261\2\264\4\0\1\263\10\0"+
    "\1\263\61\0\4\371\4\0\1\371\10\0\1\371\4\0"+
    "\2\371\1\0\2\371\3\0\1\371\30\0\2\116\3\0"+
    "\1\260\6\0\6\116\1\0\2\116\5\0\1\372\5\116"+
    "\1\0\17\116\23\0\2\116\3\0\1\260\6\0\6\116"+
    "\1\0\2\116\5\0\6\116\1\0\6\116\1\373\10\116"+
    "\24\0\1\277\13\0\3\277\61\0\15\303\1\374\65\303"+
    "\14\375\1\376\1\304\65\375\4\164\1\307\7\164\1\377"+
    "\66\164\25\0\1\310\7\0\1\310\13\0\1\310\3\0"+
    "\2\310\26\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\4\15\1\u0100\1\15\1\0\17\15\57\0"+
    "\1\u0101\122\0\1\u0102\73\0\1\u0103\73\0\1\u0104\44\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\1\u0105\4\15\1\u0106\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\1\15\1\u0107"+
    "\4\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\3\15\1\u0108\2\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\3\15\1\u0109\2\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\1\u010a\5\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\3\15\1\u010b\2\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\3\15\1\u010c\2\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\1\u010d"+
    "\1\15\5\0\6\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\6\15\1\u010e\10\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\4\15\1\u010f\1\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\1\u0110\5\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\2\15\1\u0111\14\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\7\15"+
    "\1\u0112\7\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\2\15\1\u0113\14\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\2\15\1\u0114\14\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\2\15\1\u0115\14\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\13\15"+
    "\1\u0116\3\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\11\15\1\u0117\5\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\16\15\1\u0118\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\2\15\1\u0119"+
    "\3\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\3\15\1\u011a\2\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\13\15\1\u011b\3\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\5\15\1\u011c\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\3\15\1\u011d\2\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\15\15\1\u011e\1\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\3\15\1\u011f\13\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\1\u0120"+
    "\5\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\13\15\1\u0121"+
    "\3\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\7\15\1\u0122\7\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\11\15\1\u0123\5\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\3\15\1\u0124"+
    "\2\15\1\0\7\15\1\u0125\7\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\7\15\1\u0126\7\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\3\15\1\u0127\2\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\7\15\1\u0128\7\15\23\0"+
    "\2\104\12\0\6\104\1\0\2\104\5\0\6\104\1\0"+
    "\13\104\1\u0129\3\104\24\0\1\367\13\0\3\367\63\0"+
    "\2\116\3\0\1\260\6\0\6\116\1\0\2\116\5\0"+
    "\6\116\1\0\13\116\1\u012a\3\116\23\0\2\116\3\0"+
    "\1\260\6\0\6\116\1\0\2\116\5\0\3\116\1\u012b"+
    "\2\116\1\0\17\116\21\0\14\303\1\u012c\1\374\65\303"+
    "\15\375\1\u012d\65\375\4\164\1\307\7\164\1\310\10\164"+
    "\1\377\7\164\1\377\13\164\1\377\3\164\2\377\24\164"+
    "\2\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\5\15\1\u012e\1\0\17\15\60\0\1\154\102\0"+
    "\1\u012f\104\0\1\u0130\43\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\3\15\1\u0131\2\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\4\15\1\u0132\1\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\2\15\1\u0133\3\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\4\15\1\u0134"+
    "\1\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\4\15\1\u0135\1\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\2\15\1\u0136\1\15\1\u0137\1\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\4\15\1\u0138\1\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\4\15\1\u0139\1\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\3\15\1\u013a"+
    "\2\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\3\15\1\u013b"+
    "\13\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\4\15\1\u013c\1\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\6\15\1\u013d\10\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\1\u013e\1\15\5\0\6\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\1\u013f\5\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\3\15\1\u0140\2\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\7\15\1\u0141\7\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\10\15\1\u0142"+
    "\6\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\12\15\1\u0143\4\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\1\u0144\16\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\4\15"+
    "\1\u0145\12\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\2\15\1\u0146\14\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\2\15\1\u0147\14\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\1\15"+
    "\1\u0148\4\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\13\15"+
    "\1\u0149\3\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\1\15\1\u014a\4\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\14\15\1\u014b\2\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\11\15\1\u014c\5\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\4\15\1\u014d\1\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\1\15\1\u014e\4\15\1\0\17\15"+
    "\23\0\2\116\3\0\1\260\6\0\6\116\1\0\2\116"+
    "\5\0\3\116\1\u014f\2\116\1\0\17\116\21\0\14\375"+
    "\1\376\1\u012d\65\375\2\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\17\15\1\u0150"+
    "\55\0\1\u0151\105\0\1\154\44\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\1\u0152\1\15\5\0\6\15\1\0"+
    "\17\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\7\15\1\u0153\7\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\3\15\1\u0154\2\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\5\15\1\u0155\11\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\4\15\1\u0156"+
    "\12\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\2\15\1\u0157\3\15\1\0\17\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\2\15\1\u0158\3\15\1\0\17\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\1\15\1\u0159"+
    "\4\15\1\0\17\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\2\15\1\u015a"+
    "\14\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\1\u015b\5\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\1\15"+
    "\1\u015c\4\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\1\15\1\u015d\4\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\3\15\1\u015e\2\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\3\15\1\u015f\2\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\7\15\1\u0160\7\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\12\15"+
    "\1\u0161\4\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\11\15\1\u0162\5\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\2\15\1\u0163\3\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\14\15\1\u0164\2\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\11\15"+
    "\1\u0165\5\15\103\0\1\u0150\70\0\1\u0166\34\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\3\15"+
    "\1\u0167\2\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\2\15"+
    "\1\u0168\14\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\13\15\1\u0169\3\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\17\15\1\u016a\22\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\6\15\1\0"+
    "\4\15\1\u016b\12\15\23\0\2\15\2\0\1\15\7\0"+
    "\6\15\1\0\2\15\5\0\6\15\1\0\11\15\1\u016c"+
    "\5\15\23\0\2\15\2\0\1\15\7\0\6\15\1\0"+
    "\2\15\5\0\6\15\1\0\7\15\1\u016d\7\15\23\0"+
    "\2\15\2\0\1\15\7\0\6\15\1\0\2\15\5\0"+
    "\6\15\1\0\11\15\1\u016e\5\15\23\0\2\15\2\0"+
    "\1\15\7\0\6\15\1\0\2\15\5\0\5\15\1\u016f"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\4\15\1\u0170\12\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\6\15\1\0\5\15\1\u0171\11\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\3\15"+
    "\1\u0172\2\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\3\15\1\u0173\2\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\6\15\1\u0174\10\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\2\15\1\u0175\3\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\11\15\1\u0176\5\15\103\0\1\u016a\22\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\3\15"+
    "\1\u0177\2\15\1\0\17\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\6\15\1\0\7\15"+
    "\1\u0178\7\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\2\15\1\u0179\3\15\1\0\17\15"+
    "\23\0\2\15\2\0\1\15\7\0\6\15\1\0\2\15"+
    "\5\0\3\15\1\u017a\2\15\1\0\17\15\23\0\2\15"+
    "\2\0\1\15\7\0\6\15\1\0\2\15\5\0\6\15"+
    "\1\0\7\15\1\u017b\7\15\23\0\2\15\2\0\1\15"+
    "\7\0\6\15\1\0\2\15\5\0\3\15\1\u017c\2\15"+
    "\1\0\17\15\23\0\2\15\2\0\1\15\7\0\6\15"+
    "\1\0\2\15\5\0\6\15\1\0\13\15\1\u017d\3\15"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17688];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\5\1\3\11\7\1\3\11\6\1\1\11"+
    "\13\1\4\11\1\1\1\11\2\1\1\11\10\1\1\11"+
    "\1\1\1\11\5\1\1\11\1\1\2\11\4\1\2\11"+
    "\2\1\2\11\11\1\1\0\1\11\1\1\2\11\1\0"+
    "\1\1\2\0\1\11\1\1\1\0\2\1\2\11\2\1"+
    "\1\0\1\11\1\0\1\1\2\11\3\0\43\1\13\11"+
    "\1\1\3\11\1\1\1\11\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\7\11\1\1\1\0\2\11\2\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\11\3\0\46\1"+
    "\1\11\2\1\1\0\3\1\1\0\1\1\1\11\2\1"+
    "\2\0\1\11\1\0\47\1\1\11\1\0\2\1\1\0"+
    "\40\1\1\0\24\1\1\11\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    static final HaxeDebugLogger LOG = HaxeDebugLogger.getLogger();
    static {      // Take this out when finished debugging.
      LOG.setLevel(org.apache.log4j.Level.DEBUG);
    }

    private static final class State {
        final int lBraceCount;
        final int lParenCount;
        final int state;

        public State(int state, int lBraceCount, int lParenCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
            this.lParenCount = lParenCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : " lBraceCount = " + lBraceCount)
                                        + (lParenCount == 0 ? "" : " lParenCount = " + lParenCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;
    private int lParenCount;

    private int commentStart;
    private int commentDepth;

    Project context; // Required for conditional compilation support.
    public HaxeConditionalCompilationLexerSupport ccsupport;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount, lParenCount));
        lBraceCount = 0;
        lParenCount = 0;
        yybegin(state);
    }

    private String getStateName(int state) {
        if(state == SHORT_TEMPLATE_ENTRY) {
          return "SHORT_TEMPLATE_ENTRY";
        }
        if(state == LONG_TEMPLATE_ENTRY) {
          return "LONG_TEMPLATE_ENTRY";
        }
        if(state == QUO_STRING) {
          return "QUO_STRING";
        }
        if(state == APOS_STRING) {
          return "APOS_STRING";
        }
        if(state == COMPILER_CONDITIONAL) {
          return "COMPILER_CONDITIONAL";
        }
        if(state == CC_STRING) {
          return "CC_STRING";
        }
        if(state == CC_APOS_STRING) {
          return "CC_APOS_STRING";
        }
        if(state == CC_BLOCK) {
          return "CC_BLOCK";
        }
        if(state == METADATA) {
          return "METADATA";
        }
        return null;
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        lParenCount = state.lParenCount;
        yybegin(state.state);
    }

    /** Map output within conditional blocks to comments if the condition is false. */
    private IElementType emitToken(IElementType tokenType) {
        if (ccsupport.currentContextIsActive()) {
           return tokenType;
        } else {
            return ccsupport.mapToken(tokenType);
        }
    }

    /** Deal with compiler conditional block constructs (e.g. #if...#end). */
    private IElementType processConditional(IElementType type) {
        ccsupport.processConditional(yytext(), type);

        if (PPIF.equals(type)) {
            ccStart();
        } else if (PPEND.equals(type)) {
            ccEnd();
        } else if (zzLexicalState != CC_BLOCK) {
            // Maybe the #if is missing, but if we're not at the end, we want to be sure that we're
            // in the conditional state.
            LOG.debug("Unexpected lexical state. Missing starting #if?");
            ccStart();
        }

        if (PPIF.equals(type) || PPELSEIF.equals(type)) {
            conditionStart();
        }
        return type;
    }

    // These deal with the state of lexing the *condition* for compiler conditionals
    private void conditionStart() { pushState(COMPILER_CONDITIONAL); ccsupport.conditionStart(); }
    private boolean conditionIsComplete() { return ccsupport.conditionIsComplete(); }
    private IElementType conditionAppend(IElementType type) {
        ccsupport.conditionAppend(yytext(),type);
        if (ccsupport.conditionIsComplete()) {
            conditionEnd();
        }
        return PPEXPRESSION;
    }
    private void conditionEnd() {
        ccsupport.conditionEnd();
        popState();
    }

    // We use the CC_BLOCK state to tell the highlighters, etc. that their context
    // has to go back to the start of the conditional (even though that may be a ways).  Basically,
    // we need to keep the state as something other than YYINITIAL.
    private void ccStart() { pushState(CC_BLOCK); } // Until we know better
    private void ccEnd() {
        // When there is no #if, but there is an end, popping the state produces an EmptyStackException
        // and messes up further processing.
        if (zzLexicalState == CC_BLOCK) {
            popState();
        }
    }

    // There are two other constructors generated for us.  This is the only one that is actually used.
    public _HaxeLexer(Project context) {
      this((java.io.Reader)null);
      this.context = context;
      ccsupport = new HaxeConditionalCompilationLexerSupport(context);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL);
                                                                          return emitToken( com.intellij.psi.TokenType.BAD_CHARACTER );
            } 
            // fall through
          case 146: break;
          case 2: 
            { return emitToken( com.intellij.psi.TokenType.WHITE_SPACE);
            } 
            // fall through
          case 147: break;
          case 3: 
            { return emitToken( ID);
            } 
            // fall through
          case 148: break;
          case 4: 
            { return emitToken( ODOT);
            } 
            // fall through
          case 149: break;
          case 5: 
            { return emitToken( OCOLON);
            } 
            // fall through
          case 150: break;
          case 6: 
            { return emitToken(PLPAREN);
            } 
            // fall through
          case 151: break;
          case 7: 
            { return emitToken(PRPAREN);
            } 
            // fall through
          case 152: break;
          case 8: 
            { return emitToken( OQUOTIENT);
            } 
            // fall through
          case 153: break;
          case 9: 
            { return emitToken( OMUL);
            } 
            // fall through
          case 154: break;
          case 10: 
            { return emitToken( LITINT);
            } 
            // fall through
          case 155: break;
          case 11: 
            { return emitToken( OPLUS);
            } 
            // fall through
          case 156: break;
          case 12: 
            { pushState(QUO_STRING); return emitToken( OPEN_QUOTE);
            } 
            // fall through
          case 157: break;
          case 13: 
            { pushState(APOS_STRING); return emitToken( OPEN_QUOTE);
            } 
            // fall through
          case 158: break;
          case 14: 
            { return emitToken( PLCURLY);
            } 
            // fall through
          case 159: break;
          case 15: 
            { return emitToken( PRCURLY);
            } 
            // fall through
          case 160: break;
          case 16: 
            { return emitToken( PLBRACK);
            } 
            // fall through
          case 161: break;
          case 17: 
            { return emitToken( PRBRACK);
            } 
            // fall through
          case 162: break;
          case 18: 
            { return emitToken( OSEMI);
            } 
            // fall through
          case 163: break;
          case 19: 
            { return emitToken( OCOMMA);
            } 
            // fall through
          case 164: break;
          case 20: 
            { return emitToken( OMINUS);
            } 
            // fall through
          case 165: break;
          case 21: 
            { return emitToken( OGREATER);
            } 
            // fall through
          case 166: break;
          case 22: 
            { return emitToken( OASSIGN);
            } 
            // fall through
          case 167: break;
          case 23: 
            { return emitToken( ONOT);
            } 
            // fall through
          case 168: break;
          case 24: 
            { return emitToken( OQUEST);
            } 
            // fall through
          case 169: break;
          case 25: 
            { return emitToken( OBIT_OR);
            } 
            // fall through
          case 170: break;
          case 26: 
            { return emitToken( OBIT_AND);
            } 
            // fall through
          case 171: break;
          case 27: 
            { return emitToken( OLESS);
            } 
            // fall through
          case 172: break;
          case 28: 
            { return emitToken( OBIT_XOR);
            } 
            // fall through
          case 173: break;
          case 29: 
            { return emitToken( OREMAINDER);
            } 
            // fall through
          case 174: break;
          case 30: 
            { return emitToken( REGULAR_STRING_PART);
            } 
            // fall through
          case 175: break;
          case 31: 
            { return emitToken( com.intellij.psi.TokenType.BAD_CHARACTER );
            } 
            // fall through
          case 176: break;
          case 32: 
            { popState(); return emitToken( CLOSING_QUOTE);
            } 
            // fall through
          case 177: break;
          case 33: 
            { popState(); return emitToken( ID);
            } 
            // fall through
          case 178: break;
          case 34: 
            { lBraceCount++; return emitToken( PLCURLY);
            } 
            // fall through
          case 179: break;
          case 35: 
            { if (lBraceCount == 0) {
                                                popState();
                                                return emitToken( LONG_TEMPLATE_ENTRY_END);
                                              }
                                              lBraceCount--;
                                              return emitToken( PRCURLY);
            } 
            // fall through
          case 180: break;
          case 36: 
            { LOG.debug("Bad termination of PP condition: \"" + yytext() + "\"");
                                            yypushback(1);
                                            conditionEnd();
                                            return PPBODY;
            } 
            // fall through
          case 181: break;
          case 37: 
            { return conditionAppend(com.intellij.psi.TokenType.WHITE_SPACE);
            } 
            // fall through
          case 182: break;
          case 38: 
            { return conditionAppend( ID );
            } 
            // fall through
          case 183: break;
          case 39: 
            { return conditionAppend( PLPAREN );
            } 
            // fall through
          case 184: break;
          case 40: 
            { return conditionAppend( PRPAREN );
            } 
            // fall through
          case 185: break;
          case 41: 
            { return conditionAppend( LITINT );
            } 
            // fall through
          case 186: break;
          case 42: 
            { pushState(CC_STRING); return conditionAppend( OPEN_QUOTE );
            } 
            // fall through
          case 187: break;
          case 43: 
            { pushState(CC_APOS_STRING); return conditionAppend( OPEN_QUOTE );
            } 
            // fall through
          case 188: break;
          case 44: 
            { return conditionAppend( OGREATER );
            } 
            // fall through
          case 189: break;
          case 45: 
            { return conditionAppend( ONOT );
            } 
            // fall through
          case 190: break;
          case 46: 
            { return conditionAppend( OLESS );
            } 
            // fall through
          case 191: break;
          case 47: 
            { return conditionAppend( REGULAR_STRING_PART );
            } 
            // fall through
          case 192: break;
          case 48: 
            { popState(); return conditionAppend( CLOSING_QUOTE );
            } 
            // fall through
          case 193: break;
          case 49: 
            { lParenCount++; return emitToken(PLPAREN);
            } 
            // fall through
          case 194: break;
          case 50: 
            { if (lParenCount == 0) {
                                                  popState();
                                                  return emitToken(META_WITH_ARGS_END);
                                                }
                                                lParenCount--;
                                                return emitToken(PRPAREN);
            } 
            // fall through
          case 195: break;
          case 51: 
            { return emitToken( LITFLOAT);
            } 
            // fall through
          case 196: break;
          case 52: 
            { return emitToken( TWILDCARD);
            } 
            // fall through
          case 197: break;
          case 53: 
            { return emitToken( META_ID);
            } 
            // fall through
          case 198: break;
          case 54: 
            { return emitToken( MSL_COMMENT);
            } 
            // fall through
          case 199: break;
          case 55: 
            { return emitToken( MML_COMMENT);
            } 
            // fall through
          case 200: break;
          case 56: 
            { return emitToken( OQUOTIENT_ASSIGN);
            } 
            // fall through
          case 201: break;
          case 57: 
            { return emitToken( OMUL_ASSIGN);
            } 
            // fall through
          case 202: break;
          case 58: 
            { return emitToken( LITOCT);
            } 
            // fall through
          case 203: break;
          case 59: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return emitToken( OCOMPLEMENT);
            } 
            // fall through
          case 204: break;
          case 60: 
            { return emitToken( OPLUS_PLUS);
            } 
            // fall through
          case 205: break;
          case 61: 
            { return emitToken( OPLUS_ASSIGN);
            } 
            // fall through
          case 206: break;
          case 62: 
            { return emitToken( OIN);
            } 
            // fall through
          case 207: break;
          case 63: 
            { return emitToken( KIF );
            } 
            // fall through
          case 208: break;
          case 64: 
            { return emitToken( KDO );
            } 
            // fall through
          case 209: break;
          case 65: 
            { return emitToken( OMINUS_MINUS);
            } 
            // fall through
          case 210: break;
          case 66: 
            { return emitToken( OARROW);
            } 
            // fall through
          case 211: break;
          case 67: 
            { return emitToken( OMINUS_ASSIGN);
            } 
            // fall through
          case 212: break;
          case 68: 
            { return emitToken( OFAT_ARROW);
            } 
            // fall through
          case 213: break;
          case 69: 
            { return emitToken( OEQ);
            } 
            // fall through
          case 214: break;
          case 70: 
            { return emitToken( ONOT_EQ);
            } 
            // fall through
          case 215: break;
          case 71: 
            { return emitToken( OBIT_OR_ASSIGN);
            } 
            // fall through
          case 216: break;
          case 72: 
            { return emitToken( OCOND_OR);
            } 
            // fall through
          case 217: break;
          case 73: 
            { return emitToken( OBIT_AND_ASSIGN);
            } 
            // fall through
          case 218: break;
          case 74: 
            { return emitToken( OCOND_AND);
            } 
            // fall through
          case 219: break;
          case 75: 
            { return emitToken( OLESS_OR_EQUAL);
            } 
            // fall through
          case 220: break;
          case 76: 
            { return emitToken( OSHIFT_LEFT);
            } 
            // fall through
          case 221: break;
          case 77: 
            { return emitToken( OBIT_XOR_ASSIGN);
            } 
            // fall through
          case 222: break;
          case 78: 
            { return emitToken( OREMAINDER_ASSIGN);
            } 
            // fall through
          case 223: break;
          case 79: 
            { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return emitToken( SHORT_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 224: break;
          case 80: 
            { pushState(LONG_TEMPLATE_ENTRY); return emitToken( LONG_TEMPLATE_ENTRY_START);
            } 
            // fall through
          case 225: break;
          case 81: 
            { return conditionAppend( LITFLOAT );
            } 
            // fall through
          case 226: break;
          case 82: 
            { return conditionAppend( LITOCT );
            } 
            // fall through
          case 227: break;
          case 83: 
            { return conditionAppend( OGREATER_OR_EQUAL );
            } 
            // fall through
          case 228: break;
          case 84: 
            { return conditionAppend( OEQ );
            } 
            // fall through
          case 229: break;
          case 85: 
            { return conditionAppend( ONOT_EQ );
            } 
            // fall through
          case 230: break;
          case 86: 
            { return conditionAppend( OCOND_OR );
            } 
            // fall through
          case 231: break;
          case 87: 
            { return conditionAppend( OCOND_AND );
            } 
            // fall through
          case 232: break;
          case 88: 
            { return conditionAppend( OLESS_OR_EQUAL );
            } 
            // fall through
          case 233: break;
          case 89: 
            { return emitToken( OTRIPLE_DOT);
            } 
            // fall through
          case 234: break;
          case 90: 
            { pushState(METADATA); return emitToken(META_WITH_ARGS);
            } 
            // fall through
          case 235: break;
          case 91: 
            { return emitToken( DOC_COMMENT);
            } 
            // fall through
          case 236: break;
          case 92: 
            { yypushback(2); return emitToken( LITINT);
            } 
            // fall through
          case 237: break;
          case 93: 
            { return emitToken( LITHEX);
            } 
            // fall through
          case 238: break;
          case 94: 
            { return emitToken( REG_EXP);
            } 
            // fall through
          case 239: break;
          case 95: 
            { return processConditional(PPIF);
            } 
            // fall through
          case 240: break;
          case 96: 
            { return emitToken( ONEW);
            } 
            // fall through
          case 241: break;
          case 97: 
            { return emitToken( KFOR );
            } 
            // fall through
          case 242: break;
          case 98: 
            { return emitToken( KTRY);
            } 
            // fall through
          case 243: break;
          case 99: 
            { return emitToken( KVAR);
            } 
            // fall through
          case 244: break;
          case 100: 
            { return emitToken( OSHIFT_LEFT_ASSIGN);
            } 
            // fall through
          case 245: break;
          case 101: 
            { return conditionAppend( LITHEX );
            } 
            // fall through
          case 246: break;
          case 102: 
            { return processConditional(PPEND);
            } 
            // fall through
          case 247: break;
          case 103: 
            { return emitToken( KNULL );
            } 
            // fall through
          case 248: break;
          case 104: 
            { return emitToken( KELSE );
            } 
            // fall through
          case 249: break;
          case 105: 
            { return emitToken( KENUM);
            } 
            // fall through
          case 250: break;
          case 106: 
            { return emitToken( KTRUE );
            } 
            // fall through
          case 251: break;
          case 107: 
            { return emitToken( KTHIS );
            } 
            // fall through
          case 252: break;
          case 108: 
            { return emitToken( KCASE);
            } 
            // fall through
          case 253: break;
          case 109: 
            { return emitToken( KCAST);
            } 
            // fall through
          case 254: break;
          case 110: 
            { popState(); return emitToken( KTHIS);
            } 
            // fall through
          case 255: break;
          case 111: 
            { return conditionAppend( KTRUE );
            } 
            // fall through
          case 256: break;
          case 112: 
            { return processConditional(PPELSE);
            } 
            // fall through
          case 257: break;
          case 113: 
            { return emitToken( KNEVER);
            } 
            // fall through
          case 258: break;
          case 114: 
            { return emitToken( KWHILE );
            } 
            // fall through
          case 259: break;
          case 115: 
            { return emitToken( KBREAK);
            } 
            // fall through
          case 260: break;
          case 116: 
            { return emitToken( KFINAL);
            } 
            // fall through
          case 261: break;
          case 117: 
            { return emitToken( KFALSE );
            } 
            // fall through
          case 262: break;
          case 118: 
            { return emitToken( KUSING );
            } 
            // fall through
          case 263: break;
          case 119: 
            { return emitToken( KTHROW );
            } 
            // fall through
          case 264: break;
          case 120: 
            { return emitToken( KCLASS);
            } 
            // fall through
          case 265: break;
          case 121: 
            { return emitToken( KCATCH);
            } 
            // fall through
          case 266: break;
          case 122: 
            { return emitToken( KSUPER );
            } 
            // fall through
          case 267: break;
          case 123: 
            { return conditionAppend( KFALSE );
            } 
            // fall through
          case 268: break;
          case 124: 
            { return emitToken( KMACRO2);
            } 
            // fall through
          case 269: break;
          case 125: 
            { return emitToken( KIMPORT );
            } 
            // fall through
          case 270: break;
          case 126: 
            { return emitToken( KINLINE);
            } 
            // fall through
          case 271: break;
          case 127: 
            { return emitToken( KRETURN );
            } 
            // fall through
          case 272: break;
          case 128: 
            { return emitToken( KPUBLIC);
            } 
            // fall through
          case 273: break;
          case 129: 
            { return emitToken( KSWITCH );
            } 
            // fall through
          case 274: break;
          case 130: 
            { return emitToken( KSTATIC);
            } 
            // fall through
          case 275: break;
          case 131: 
            { return processConditional(PPELSEIF);
            } 
            // fall through
          case 276: break;
          case 132: 
            { return emitToken( KEXTENDS);
            } 
            // fall through
          case 277: break;
          case 133: 
            { return emitToken( KEXTERN);
            } 
            // fall through
          case 278: break;
          case 134: 
            { return emitToken( KDEFAULT);
            } 
            // fall through
          case 279: break;
          case 135: 
            { return emitToken( KDYNAMIC);
            } 
            // fall through
          case 280: break;
          case 136: 
            { return emitToken( KUNTYPED);
            } 
            // fall through
          case 281: break;
          case 137: 
            { return emitToken( KTYPEDEF);
            } 
            // fall through
          case 282: break;
          case 138: 
            { return emitToken( KPRIVATE);
            } 
            // fall through
          case 283: break;
          case 139: 
            { return emitToken( KPACKAGE);
            } 
            // fall through
          case 284: break;
          case 140: 
            { return emitToken( KOVERRIDE);
            } 
            // fall through
          case 285: break;
          case 141: 
            { return emitToken( KABSTRACT);
            } 
            // fall through
          case 286: break;
          case 142: 
            { return emitToken( KFUNCTION);
            } 
            // fall through
          case 287: break;
          case 143: 
            { return emitToken( KCONTINUE );
            } 
            // fall through
          case 288: break;
          case 144: 
            { return emitToken( KINTERFACE);
            } 
            // fall through
          case 289: break;
          case 145: 
            { return emitToken( KIMPLEMENTS);
            } 
            // fall through
          case 290: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
